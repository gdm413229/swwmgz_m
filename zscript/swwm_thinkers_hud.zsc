// thinkers related to the hud

// "Full History" contains all messages since session start, nothing is flushed
// this can be accessed from a section of the knowledge base
Class SWWMFullHistory : Thinker
{
	Array<MsgLine> msg;

	static clearscope SWWMFullHistory Get()
	{
		let fh = SWWMFullHistory(ThinkerIterator.Create("SWWMFullHistory",STAT_STATIC).Next());
		return fh;
	}

	static void PushMessage( String str, int tic, int type )
	{
		let fh = SWWMFullHistory(ThinkerIterator.Create("SWWMFullHistory",STAT_STATIC).Next());
		if ( !fh )
		{
			fh = new("SWWMFullHistory");
			fh.ChangeStatNum(STAT_STATIC);
		}
		MsgLine m = new("MsgLine");
		m.str = str;
		m.tic = tic;
		m.type = type;
		fh.msg.Push(m);
	}
}

Enum EScoreObjType
{
	ST_Score,
	ST_Damage,
	ST_Health,
	ST_Armor
};

// floating scores
Class SWWMScoreObj : Thinker
{
	int xcnt;
	int xtcolor[6];
	int xscore[6];
	String xstr[6];
	int tcolor;
	int score;
	Vector3 pos;
	int lifespan, initialspan;
	int starttic, seed, seed2;
	SWWMScoreObj prev, next;
	bool damnum;
	Actor acc;

	static SWWMScoreObj Spawn( int score, Vector3 pos, int type = ST_Score, Actor acc = null, int tcolor = -1 )
	{
		// early checks
		if ( (type == ST_SCORE) && !swwm_scorenums ) return null;
		else if ( (type > ST_SCORE) && !swwm_healthnums ) return null;
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( !hnd ) return null;
		let o = new("SWWMScoreObj");
		o.ChangeStatNum(STAT_USER);
		o.score = score;
		o.pos = pos;
		o.lifespan = o.initialspan = 60;
		if ( tcolor != -1 ) o.tcolor = tcolor;
		else switch ( type )
		{
		case ST_Score:
			o.tcolor = swwm_numcolor_scr;
			break;
		case ST_Damage:
			o.tcolor = swwm_numcolor_dmg;
			break;
		case ST_Health:
			o.tcolor = swwm_numcolor_hp;
			break;
		case ST_Armor:
			o.tcolor = swwm_numcolor_ap;
			break;
		}
		o.starttic = level.maptime;
		o.seed = Random[ScoreBits]();
		o.seed2 = Random[ScoreBits]();
		o.damnum = (type > ST_Score);
		o.xcnt = 0;
		for ( int i=0; i<6; i++ ) o.xtcolor[i] = swwm_numcolor_bonus;
		o.acc = acc;
		if ( o.damnum )
		{
			o.next = hnd.damnums;
			if ( hnd.damnums ) hnd.damnums.prev = o;
			hnd.damnums = o;
			hnd.damnums_cnt++;
		}
		else
		{
			o.next = hnd.scorenums;
			if ( hnd.scorenums ) hnd.scorenums.prev = o;
			hnd.scorenums = o;
			hnd.scorenums_cnt++;
		}
		return o;
	}

	override void OnDestroy()
	{
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( hnd )
		{
			if ( damnum )
			{
				hnd.damnums_cnt--;
				if ( !prev ) hnd.damnums = next;
			}
			else
			{
				hnd.scorenums_cnt--;
				if ( !prev ) hnd.scorenums = next;
			}
			if ( !prev )
			{
				if ( next ) next.prev = null;
			}
			else
			{
				prev.next = next;
				if ( next ) next.prev = prev;
			}
		}
		Super.OnDestroy();
	}

	override void Tick()
	{
		lifespan--;
		if ( lifespan <= 0 ) Destroy();
	}
}

enum EInterestType
{
	INT_Key,
	INT_Exit
};

Class SWWMInterest : Thinker
{
	int type;
	Key trackedkey;
	Line trackedline;
	Vector3 pos;
	SWWMInterest prev, next;
	String keytag;

	static SWWMInterest Spawn( Vector3 pos = (0,0,0), Key thekey = null, Line theline = null )
	{
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( !hnd ) return null;
		if ( (!thekey && !theline) || (thekey && theline) ) return null;
		let i = new("SWWMInterest");
		i.ChangeStatNum(STAT_USER);
		i.trackedkey = thekey;
		i.trackedline = theline;
		if ( thekey )
		{
			i.type = INT_Key;
			i.keytag = thekey.GetTag();
		}
		else if ( theline ) i.type = INT_Exit;
		else
		{
			i.Destroy();
			return null;
		}
		i.pos = thekey?thekey.Vec3Offset(0,0,thekey.height/2):pos;
		i.next = hnd.intpoints;
		if ( hnd.intpoints ) hnd.intpoints.prev = i;
		hnd.intpoints = i;
		hnd.intpoints_cnt++;
		return i;
	}

	override void OnDestroy()
	{
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( hnd )
		{
			hnd.intpoints_cnt--;
			if ( !prev )
			{
				hnd.intpoints = next;
				if ( next ) next.prev = null;
			}
			else
			{
				prev.next = next;
				if ( next ) next.prev = prev;
			}
		}
		Super.OnDestroy();
	}

	override void Tick()
	{
		// update
		if ( (type == INT_Key) && (!trackedkey || trackedkey.Owner) ) Destroy();
		else if ( trackedkey ) pos = trackedkey.Vec3Offset(0,0,trackedkey.height/2);
	}
}

Class SWWMItemSense : Thinker
{
	Actor item;
	String tag;
	int updated;
	bool scoreitem, vipitem;
	Demolitionist parent;
	SWWMItemSense prev, next;
	Vector3 pos;

	static SWWMItemSense Spawn( Demolitionist parent, Actor item )
	{
		if ( !parent || !item ) return null;
		// only refresh the updated time if existing
		for ( SWWMItemSense s=parent.itemsense; s; s=s.next )
		{
			if ( s.item != item ) continue;
			s.updated = level.maptime+35;
			s.pos = item.Vec3Offset(0,0,item.height);
			return s;
		}
		let i = new("SWWMItemSense");
		i.ChangeStatNum(STAT_USER);
		i.item = item;
		if ( item is 'SWWMRespawnTimer' )
		{
			i.scoreitem = SWWMUtility.IsScoreItem(item.tracer);
			i.vipitem = SWWMUtility.IsVipItem(item.tracer);
		}
		else
		{
			i.scoreitem = SWWMUtility.IsScoreItem(item);
			i.vipitem = SWWMUtility.IsVipItem(item);
		}
		i.parent = parent;
		i.updated = level.maptime+35;
		i.UpdateTag();
		i.pos = item.Vec3Offset(0,0,item.height);
		i.next = parent.itemsense;
		if ( parent.itemsense ) parent.itemsense.prev = i;
		parent.itemsense = i;
		parent.itemsense_cnt++;
		return i;
	}

	void UpdateTag()
	{
		let i = item;
		if ( i is 'SWWMRespawnTimer' ) i = i.tracer;
		if ( !i ) return;
		// our ammo types use the pickup message, as it's amount-aware
		if ( (i is 'SWWMAmmo') || (i is 'MagAmmo') )
			tag = Inventory(i).PickupMessage();
		else tag = i.GetTag();
	}

	override void OnDestroy()
	{
		if ( parent )
		{
			parent.itemsense_cnt--;
			if ( !prev )
			{
				parent.itemsense = next;
				if ( next ) next.prev = null;
			}
			else
			{
				prev.next = next;
				if ( next ) next.prev = prev;
			}
		}
		Super.OnDestroy();
	}

	override void Tick()
	{
		if ( !parent )
		{
			Destroy();
			return;
		}
		// expire
		if ( level.maptime > updated+70 ) Destroy();
	}
}

// enemy combat tracker
Class SWWMCombatTracker : Thinker
{
	Actor mytarget;
	String mytag;
	int updated, lasthealth, maxhealth;
	DynamicValueInterpolator intp;
	Vector3 pos, prevpos, oldpos, oldprev;
	PlayerInfo myplayer;
	SWWMCombatTracker prev, next;
	bool legged, mutated;
	int tcnt;
	double height;
	int mxdist, dbar;
	bool bBOSS, bFRIENDLY;
	bool firsthit;
	bool bUpdateMorph;
	String unmorphedtag;

	void UpdateTag()
	{
		if ( mytarget && (mytarget.player || mytarget.bISMONSTER || (mytarget is 'BossBrain') || (mytarget is 'SWWMHangingKeen') || (mytarget is 'Demolitionist')) )
		{
			String realtag = swwm_funtags?SWWMUtility.GetFunTag(mytarget,FallbackTag):mytarget.GetTag(FallbackTag);
			if ( realtag == FallbackTag )
			{
				realtag = mytarget.GetClassName();
				SWWMUtility.BeautifyClassName(realtag);
			}
			mytag = mytarget.player?(mytarget.player.mo!=mytarget)?String.Format(StringTable.Localize("$FN_VOODOO"),mytarget.player.GetUserName()):mytarget.player.GetUserName():realtag;
		}
		else mytag = "";
	}

	static SWWMCombatTracker Spawn( Actor target, bool update = false )
	{
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( !hnd ) return null;
		// NOTE: These are only ever called once a thing spawns, so we don't need to "check" if entries already exist
		// this check will only be performed in "update mode", i.e. when called from the swwmupdatetrackers netevent,
		// or when a monster is revived
		SWWMCombatTracker t;
		if ( update ) for ( t=hnd.trackers; t; t=t.next )
		{
			if ( t.mytarget != target ) continue;
			return t;
		}
		t = new("SWWMCombatTracker");
		t.ChangeStatNum(STAT_USER);
		t.mytarget = target;
		t.UpdateTag();
		if ( target.player )
		{
			t.lasthealth = target.health;
			t.maxhealth = target.default.health;
		}
		else t.lasthealth = t.maxhealth = target.health;
		t.updated = int.min;
		t.height = target.height;
		t.pos = level.Vec3Offset(target.pos,(0,0,t.height));
		t.prevpos = level.Vec3Offset(target.prev,(0,0,t.height));
		t.oldpos = target.pos;
		t.oldprev = target.prev;
		t.intp = DynamicValueInterpolator.Create(t.lasthealth,.5,1,100);
		t.myplayer = target.player;
		t.next = hnd.trackers;
		t.bBOSS = target.bBOSS;
		t.bFRIENDLY = target.IsFriend(players[consoleplayer].mo);
		if ( hnd.trackers )
		{
			hnd.trackers.prev = t;
			// propagate cvar values
			t.mxdist = hnd.trackers.mxdist;
			t.dbar = hnd.trackers.dbar;
		}
		hnd.trackers = t;
		hnd.trackers_cnt++;
		return t;
	}

	override void OnDestroy()
	{
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( hnd )
		{
			hnd.trackers_cnt--;
			if ( !prev )
			{
				hnd.trackers = next;
				if ( next ) next.prev = null;
			}
			else
			{
				prev.next = next;
				if ( next ) next.prev = prev;
			}
		}
		Super.OnDestroy();
	}

	override void Tick()
	{
		// only the first tracker accesses the CVars, saves on perf
		if ( !prev )
		{
			dbar = swwm_damagetarget;
			mxdist = swwm_maxtargetdist;
		}
		if ( next )
		{
			next.dbar = dbar;
			next.mxdist = mxdist;
		}
		// is target gone or dead?
		if ( !mytarget || (mytarget.Health <= 0) )
		{
			// we're done
			if ( updated > level.maptime ) updated = level.maptime;
			lasthealth = 0;
			prevpos = pos;	// prevent stuttering
			intp.Update(lasthealth);
			if ( level.maptime > updated+35 ) Destroy();
			return;
		}
		// don't update dormant targets
		if ( mytarget.bDORMANT )
			return;
		// only update height/position while alive
		bool heightchanged = false;
		if ( height != mytarget.height ) heightchanged = true;
		height = mytarget.height;
		if ( heightchanged || (mytarget.pos != oldpos) || (mytarget.prev != oldprev) )
		{
			oldpos = mytarget.pos;
			oldprev = mytarget.prev;
			pos = level.Vec3Offset(mytarget.pos,(0,0,height));
			prevpos = level.Vec3Offset(mytarget.prev,(0,0,height));
		}
		if ( bUpdateMorph && !(mytarget is 'MorphedMonster') )
		{
			// reset our tag
			mytag = unmorphedtag;
			bUpdateMorph = false;
		}
		tcnt++;
		if ( (tcnt == 1) && !mytarget.player )
		{
			// post-spawn health inflation check
			if ( lasthealth > maxhealth )
			{
				maxhealth = lasthealth;
				intp.Reset(lasthealth);
			}
			// post-spawn morph check
			if ( (mytarget is 'MorphedMonster') && MorphedMonster(mytarget).UnmorphedMe )
			{
				// look for a previous tracker that has the same target as us
				for ( SWWMCombatTracker t=next; t; t=t.next )
				{
					if ( t.mytarget != mytarget ) continue;
					// change its tag and destroy ourselves (such is life)
					t.bUpdateMorph = true;
					t.unmorphedtag = t.mytag;
					t.mytag = String.Format("%s (%s)",mytag,t.unmorphedtag);
					Destroy();
					return;
				}
			}
		}
		if ( (tcnt == 6) && !mytarget.player )
		{
			// legendoom check
			for ( Inventory i=mytarget.inv; i; i=i.inv )
			{
				if ( i.GetClassName() != "LDLegendaryMonsterToken" ) continue;
				legged = true;
				// adjust for health inflation
				if ( lasthealth > maxhealth )
				{
					maxhealth = lasthealth;
					intp.Reset(lasthealth);
				}
			}
		}
		if ( legged && !mutated )
		{
			// check inventory regularly to mark as mutated
			for ( Inventory i=mytarget.inv; i; i=i.inv )
			{
				if ( i.GetClassName() != "LDLegendaryMonsterTransformed" ) continue;
				mutated = true;
				Console.Printf(StringTable.Localize("$SWWM_LTFORM"),mytag);
			}
		}
		bFRIENDLY = mytarget.IsFriend(players[consoleplayer].mo);
		if ( mytarget.Health < lasthealth ) firsthit = true;
		lasthealth = mytarget.Health;
		intp.Update(lasthealth);
		// special update conditions
		if ( dbar && !mytarget.player )
		{
			if ( (dbar == 2) && (lasthealth >= maxhealth) )
				return;
			else if ( (dbar == 1) && !firsthit )
				return;
		}
		if ( (mytarget.bISMONSTER || mytarget.player) && !mytarget.bINVISIBLE && !mytarget.bCORPSE )
		{
			// players (but not voodoo dolls), always if friendly, otherwise only update if visible
			if ( mytarget.player && (mytarget.player.mo == mytarget) )
			{
				if ( mytarget.IsFriend(players[consoleplayer].mo) ) updated = level.maptime+35;
				else if ( ((mxdist <= 0) || (mytarget.Vec3To(players[consoleplayer].Camera).length() < mxdist)) && players[consoleplayer].Camera.CheckSight(mytarget,SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY) )
					updated = level.maptime;
			}
			// friendlies within a set distance
			else if ( mytarget.bFRIENDLY && ((mxdist <= 0) || (mytarget.Vec3To(players[consoleplayer].Camera).length() < mxdist)) && players[consoleplayer].Camera.CheckSight(mytarget,SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY) ) updated = level.maptime+35;
			// enemies within a set distance that have us as target
			else if ( mytarget.target && (mytarget.target.Health > 0) && (mytarget.target.player == players[consoleplayer]) && ((mxdist <= 0) || (mytarget.Vec3To(players[consoleplayer].Camera).length() < mxdist)) && players[consoleplayer].Camera.CheckSight(mytarget,SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY) ) updated = level.maptime+70;
			// any visible enemies within one quarter of the set distance
			else if ( ((mxdist <= 0) || (mytarget.Vec3To(players[consoleplayer].Camera).length() < (mxdist/4))) && players[consoleplayer].Camera.CheckSight(mytarget,SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY) ) updated = level.maptime;
		}
		else if ( (mytarget is 'BossBrain') || (mytarget is 'SWWMHangingKeen') )
		{
			// special stuff, only if visible
			if ( ((mxdist <= 0) || (mytarget.Vec3To(players[consoleplayer].Camera).length() < (mxdist/4))) && players[consoleplayer].Camera.CheckSight(mytarget,SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY) ) updated = level.maptime;
		}
	}
}

// ultralight trackers for certain things
Class SWWMSimpleTracker : Thinker
{
	Actor target;
	double radius;
	double angle;
	Vector3 pos;
	bool isplayer;
	Color playercol;
	bool ismonster;
	bool friendly;
	bool countkill;
	bool shootable;
	bool isitem;
	bool countitem;
	bool vipitem;
	bool expired;
	bool ismissile;
	bool isbeam;
	int lastupdate;
	ui double smoothalpha;	// smoothened alpha, for ui
	SWWMSimpleTracker prev, next;

	void Update()
	{
		if ( !target ) return;
		isbeam = SWWMUtility.IsBeamProj(target);
		radius = isbeam?(target.speed*cos(target.pitch)):target.radius;
		angle = target.angle;
		pos = target.pos;
		isplayer = target.player;
		if ( isplayer ) playercol = target.player.GetColor();
		ismonster = target.bISMONSTER;
		friendly = target.IsFriend(players[consoleplayer].mo);
		countkill = target.bCOUNTKILL;
		shootable = target.default.bSHOOTABLE;
		ismissile = isbeam||target.default.bMISSILE;
		isitem = (target is 'Inventory');
		countitem = SWWMUtility.IsScoreItem(target);
		vipitem = SWWMUtility.IsVipItem(target);
		lastupdate = level.maptime;
		if ( isitem )
		{
			if ( !target.bSPECIAL || Inventory(target).Owner )
				expired = true;
			else
			{
				expired = false;
				lastupdate += 35;
				if ( countitem ) lastupdate += 35;
				if ( vipitem ) lastupdate += 70;
			}
		}
		else if ( vipitem )
		{
			if ( (target is 'Chancebox') && (target.CurState != target.SpawnState) )
				expired = true;
			else
			{
				expired = false;
				lastupdate += 70;
			}
		}
		else if ( friendly )
		{
			expired = target.bKILLED;
			if ( expired ) lastupdate += 35;
			else lastupdate += 140;
		}
		else if ( ismonster )
		{
			expired = target.bKILLED||target.bUnmorphed;
			if ( !expired )
			{
				lastupdate += 35;
				if ( target.target == players[consoleplayer].mo )
					lastupdate += 70;
			}
		}
		else if ( ismissile && !isbeam )
			expired = !target.bMISSILE;
		else if ( target.default.bSHOOTABLE )
			expired = (target.Health<=0);
	}

	static SWWMSimpleTracker Track( Actor target )
	{
		let hnd = SWWMHandler(EventHandler.Find("SWWMHandler"));
		if ( !hnd ) return null;
		SWWMSimpleTracker t;
		for ( t=hnd.strackers; t; t=t.next )
		{
			if ( t.target != target ) continue;
			t.Update();
			return t;
		}
		t = new("SWWMSimpleTracker");
		t.ChangeStatNum(STAT_INFO);
		t.target = target;
		t.Update();
		t.next = hnd.strackers;
		if ( hnd.strackers ) hnd.strackers.prev = t;
		hnd.strackers = t;
		hnd.strackers_cnt++;
		return t;
	}
}
